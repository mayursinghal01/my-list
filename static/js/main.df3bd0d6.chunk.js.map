{"version":3,"sources":["Components/Debounce/Searchtem.jsx","Components/Debounce/DebounceSearch.jsx","Components/Header.jsx","App.js","actions/actionTypes.js","model/Task.js","Reducers/taskReducer.js","store.js","index.js"],"names":["SearchItem","result","forwardRef","className","ref","id","title","DebounceSearch","useState","searchTerm","setSearchTerm","posts","setPosts","page","setPage","isFetching","setFetching","searching","setSearching","found","setFound","lastItemRef","useRef","observer","query","setQuery","useEffect","handler","setTimeout","clearTimeout","current","IntersectionObserver","entries","isIntersecting","rootMargin","threshold","observe","disconnect","newQuery","replace","postUrl","axios","get","then","res","data","length","catch","error","console","log","getPosts","type","placeholder","value","onChange","e","target","style","color","fontWeight","map","post","Header","App","ADD_TASK","DELETE_TASK","CHECK_TASK","CLEAR_COMPLETED","SET_FILTER","Task","completed","this","intitalState","taskType","tasks","store","createStore","state","action","task","filter","obj","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.df3bd0d6.chunk.js","sourcesContent":["\n\nconst SearchItem = ({result,forwardRef}) => {\n    return (\n        <div className=\"card\" ref={forwardRef}>\n            <div className=\"description\"> \n                <h4>{result.id}</h4>\n                <p> {result.title}</p>\n            </div>\n       \n        </div>\n    )\n}\n\nexport default SearchItem\n","import axios from \"axios\";\nimport { useState,useEffect,useRef } from \"react\"\nimport SearchItem from \"./Searchtem\";\n\n\nconst DebounceSearch = () => {\n\n    const url = `https://jsonplaceholder.typicode.com/posts?q=`;\n    const [searchTerm, setSearchTerm] = useState('');\n    const [posts, setPosts] = useState([]);\n    const [page,setPage] = useState(1)\n    const [isFetching,setFetching] = useState(true)\n    const [searching,setSearching] = useState(false)\n    const [found,setFound] = useState(false)\n    const lastItemRef = useRef();\n    const observer = useRef();\n    \n\n    const [query, setQuery] = useState(searchTerm);\n\n    useEffect(() => {\n        const handler = setTimeout(() => {\n            setFound(false)\n            setPosts([])\n            setPage(1)\n            setQuery(searchTerm);\n            setFetching(true)\n        }, 500);\n        return () => {\n            clearTimeout(handler);\n        };\n    },[searchTerm]);\n\n\n    const getPosts = (query) => {\n        const newQuery = query.replace(\" \",\"+\");\n        const postUrl = url + `${newQuery}&_limit=10&_page=${page}`\n        setSearching(true)\n        axios.get(postUrl).then(\n            res => res.data,\n        ).then((data) => {\n            if(data.length === 0){\n                setPage(1)\n                setSearching(false)\n                setFound(true)\n                return;\n            }\n            setSearching(false)\n            setPosts([...posts,...data])\n            setPage(page+1)\n            setFetching(false)\n        }).catch(error => {\n            console.log(error)    \n        })\n    }\n    useEffect(() => {\n        const options = {\n            rootMargin: \"-8px\",\n            threshold: 1\n        };\n        const callback = (entries) => {\n            if (entries[0].isIntersecting) {\n                setFetching(true)\n            }\n        };\n        observer.current = new IntersectionObserver(callback, options);\n        if (lastItemRef.current) {\n            observer.current.observe(lastItemRef.current);\n        }\n        return () => {\n            observer.current.disconnect();\n        };\n    });\n    useEffect(() => {\n        if (query && isFetching) {\n            getPosts(query)\n        }\n    },[query,isFetching]);\n\n\n    return (\n        <div className='search'>\n            <input \n                type=\"text\" placeholder=\"Enter Something\" \n                value={searchTerm}\n                onChange={e => setSearchTerm(e.target.value)}\n            />\n            <div style={{color:\"black\",fontWeight:\"bolder\"}} >Search : hi, odio, autem, distinctio qu, optio</div>\n            {posts.map(post => (\n                <SearchItem forwardRef={lastItemRef} key={post.id} result={post} />\n            ))}\n            {searching && <h1>Searching....</h1> }\n            {found && <h1>Its over</h1> }\n        </div>\n    )\n}\n\nexport default DebounceSearch\n","\nconst Header = () => {\n    return (\n        <>\n            <h1 id = \"header\" >my list</h1>\n        </>\n    )\n}\n\nexport default Header\n","import './App.css';\nimport DebounceSearch from './Components/Debounce/DebounceSearch';\nimport Header from './Components/Header';\n\n\n\n// import InfinteUseIntersection from './Components/InfiniteScrolling/InfinteUseIntersection';\n// import InfiniteScrolling from './Components/InfiniteScrolling/InfiniteScrolling';\n// import TaskManger from './Components/TaskManger';\n// import Filters from './Components/Filters';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header/>\n      <hr />\n      <DebounceSearch/>\n\n\n      {/* <InfiniteScrolling/>\n      <Filters/>\n      <TaskManger/>\n      <InfinteUseIntersection/> */}\n    </div>\n  );\n}\n\nexport default App;\n","export const ADD_TASK = 'ADD_TASK';\nexport const DELETE_TASK = 'DELETE_TASK';\nexport const CHECK_TASK = 'CHECK_TASK';\nexport const CLEAR_COMPLETED = 'CLEAR_COMPLETED';\n\nexport const SET_FILTER= 'SET_FILTER'","class Task {\n    constructor(id, title,completed = false) {\n        this.id = id\n        this.title = title\n        this.completed = completed\n    }\n}\n\nexport default Task","import { ADD_TASK, CHECK_TASK, CLEAR_COMPLETED,  DELETE_TASK, SET_FILTER } from \"../actions/actionTypes\";\nimport Task from \"../model/Task\";\n\n\nconst intitalState = {\n    taskType : 'ALL',\n    tasks : [\n        new Task(1,\"Task number 1 which has to be done by this date\",false),\n        new Task(2,\"Task number 2 clouser\",false),\n        new Task(3,\"Detail-out task 3\",false),\n        new Task(4,\"Pick someone at the airport at that day\",true),\n        new Task(5,\"Pick someone at the airport at that day\",true)\n    ]\n}\n\nexport const taskReducer = (state= intitalState,action) => {\n    switch(action.type){\n\n        case ADD_TASK :\n            const task = new Task(\n                state.tasks.length+1,\n                action.data\n            )\n            \n            return {\n                ...state,\n               tasks: [...state.tasks,task]\n            }\n\n        case DELETE_TASK :\n            \n            return {\n                ...state,\n                tasks: state.tasks.filter(task => task.id !== action.id)\n            }\n\n        case CHECK_TASK:\n            const tasks = state.tasks.map(obj =>{\n                if(obj.id === action.id){\n                    obj.completed = !obj.completed\n                }\n                return obj\n            })\n            \n            return {\n                ...state,\n                tasks\n            }\n\n\n        case CLEAR_COMPLETED :\n            return {\n                ...state,\n                tasks: state.tasks.filter(task => task.completed === false)\n            }\n\n        case SET_FILTER :\n            return {\n                ...state,\n                taskType : action.taskType\n            }\n\n        default :\n            return state;\n    }\n}\n","import { createStore } from \"redux\";\nimport { taskReducer } from \"./Reducers/taskReducer\";\n\n\n\nconst store = createStore(taskReducer);\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './store';\nimport { Provider } from 'react-redux';\n\n\nReactDOM.render(\n  <Provider store={store}> \n   <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}