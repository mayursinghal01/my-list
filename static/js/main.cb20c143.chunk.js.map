{"version":3,"sources":["Components/Debounce/Searchtem.jsx","Components/Debounce/DebounceSearch.jsx","Components/Header.jsx","actions/actionTypes.js","Components/AddTask.jsx","actions/taskActions.js","Components/TaskDone.jsx","Components/TaskItem.jsx","Components/TaskList.jsx","Components/TaskManger.jsx","Components/Button.jsx","Components/Filters.jsx","App.js","model/Task.js","Reducers/taskReducer.js","store.js","index.js"],"names":["SearchItem","result","forwardRef","className","ref","id","title","DebounceSearch","useState","searchTerm","setSearchTerm","posts","setPosts","page","setPage","isFetching","setFetching","searching","setSearching","found","setFound","lastItemRef","useRef","observer","query","setQuery","useEffect","handler","setTimeout","clearTimeout","current","IntersectionObserver","entries","isIntersecting","rootMargin","threshold","observe","disconnect","newQuery","replace","postUrl","axios","get","then","res","data","length","catch","error","console","log","getPosts","type","placeholder","value","onChange","e","target","style","color","fontWeight","map","post","Header","ADD_TASK","DELETE_TASK","CHECK_TASK","CLEAR_COMPLETED","SET_FILTER","AddTask","setTitle","setError","dispatch","useDispatch","add","setAdd","onSubmit","preventDefault","valid","alert","addTask","SendRounded","Add","onClick","TaskDone","EmojiEmotionsRounded","TaskItem","task","check","completed","defaultChecked","textDecoration","Close","TaskList","tasks","useSelector","state","taskType","list","setList","filter","TaskManger","Button","handleFilter","setFilter","border","borderRadius","Filters","setLength","App","Task","this","intitalState","store","createStore","action","obj","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cb20c143.chunk.js","sourcesContent":["\n\nconst SearchItem = ({result,forwardRef}) => {\n    return (\n        <div className=\"card\" ref={forwardRef}>\n            <div className=\"description\"> \n                <h4>{result.id}</h4>\n                <p> {result.title}</p>\n            </div>\n       \n        </div>\n    )\n}\n\nexport default SearchItem\n","import axios from \"axios\";\nimport { useState,useEffect,useRef } from \"react\"\nimport SearchItem from \"./Searchtem\";\n\n\nconst DebounceSearch = () => {\n\n    const url = `https://jsonplaceholder.typicode.com/posts?q=`;\n    const [searchTerm, setSearchTerm] = useState('');\n    const [posts, setPosts] = useState([]);\n    const [page,setPage] = useState(1)\n    const [isFetching,setFetching] = useState(true)\n    const [searching,setSearching] = useState(false)\n    const [found,setFound] = useState(false)\n    const lastItemRef = useRef();\n    const observer = useRef();\n    \n\n    const [query, setQuery] = useState(searchTerm);\n\n    useEffect(() => {\n        const handler = setTimeout(() => {\n            setFound(false)\n            setPosts([])\n            setPage(1)\n            setQuery(searchTerm);\n            setFetching(true)\n        }, 500);\n        return () => {\n            clearTimeout(handler);\n        };\n    },[searchTerm]);\n\n\n    const getPosts = (query) => {\n        const newQuery = query.replace(\" \",\"+\");\n        const postUrl = url + `${newQuery}&_limit=10&_page=${page}`\n        setSearching(true)\n        axios.get(postUrl).then(\n            res => res.data,\n        ).then((data) => {\n            if(data.length === 0){\n                setPage(1)\n                setSearching(false)\n                setFound(true)\n                return;\n            }\n            setSearching(false)\n            setPosts([...posts,...data])\n            setPage(page+1)\n            setFetching(false)\n        }).catch(error => {\n            console.log(error)    \n        })\n    }\n    useEffect(() => {\n        const options = {\n            rootMargin: \"-8px\",\n            threshold: 1\n        };\n        const callback = (entries) => {\n            if (entries[0].isIntersecting) {\n                setFetching(true)\n            }\n        };\n        observer.current = new IntersectionObserver(callback, options);\n        if (lastItemRef.current) {\n            observer.current.observe(lastItemRef.current);\n        }\n        return () => {\n            observer.current.disconnect();\n        };\n    });\n    useEffect(() => {\n        if (query && isFetching) {\n            getPosts(query)\n        }\n    },[query,isFetching]);\n\n\n    return (\n        <div className='search'>\n            <input \n                type=\"text\" placeholder=\"Enter Something\" \n                value={searchTerm}\n                onChange={e => setSearchTerm(e.target.value)}\n            />\n            <div style={{color:\"black\",fontWeight:\"bolder\"}} >Search : hi, odio, autem, distinctio qu, optio</div>\n            {posts.map(post => (\n                <SearchItem forwardRef={lastItemRef} key={post.id} result={post} />\n            ))}\n            {searching && <h1>Searching....</h1> }\n            {found && <h1>Its over</h1> }\n        </div>\n    )\n}\n\nexport default DebounceSearch\n","\nconst Header = () => {\n    return (\n        <>\n            <h1 id = \"header\" >my list</h1>\n        </>\n    )\n}\n\nexport default Header\n","export const ADD_TASK = 'ADD_TASK';\nexport const DELETE_TASK = 'DELETE_TASK';\nexport const CHECK_TASK = 'CHECK_TASK';\nexport const CLEAR_COMPLETED = 'CLEAR_COMPLETED';\n\nexport const SET_FILTER= 'SET_FILTER'","import {Add, SendRounded} from \"@material-ui/icons\"\nimport { useState } from \"react\"\nimport { useDispatch } from \"react-redux\";\nimport { addTask } from \"../actions/taskActions\";\n\nconst AddTask = () => {\n\n    const [title,setTitle] = useState('');\n    const [error,setError] = useState('Title cannot be blank');\n    const dispatch = useDispatch()\n    const handleChange = (e) => {\n        setTitle(e.target.value)\n        if(title !== ''){\n            setAdd(true)\n        }\n        \n    }\n    \n    const handleSubmit = (e) => {\n\n        e.preventDefault();\n        \n        let valid = true;\n        if(title === ''){\n            setError('Title cannot be blank')\n            alert(error)\n            valid = false;\n        }\n        \n        if(valid){\n            const data = title\n            dispatch(addTask(data))\n            setTitle('')\n            setAdd(false)\n        }\n    }\n    const[add,setAdd] = useState(false)\n    const handleIcon = () => {\n        setAdd(true)\n    }\n    return (\n        <form onSubmit={handleSubmit}> \n            {add ? <SendRounded className=\"icon\"/> : <Add className=\"icon\"/>}\n            \n            \n            <input \n                type=\"text\" \n                placeholder=\"What need to be done\"\n                value = {title}\n                onChange={handleChange} \n                onClick ={handleIcon}\n                \n                />\n        </form>\n    )\n}\n\nexport default AddTask\n","import { ADD_TASK, CHECK_TASK, DELETE_TASK,CLEAR_COMPLETED, SET_FILTER } from \"./actionTypes\"\n\nexport const addTask = (data) => {\n    \n    return {\n        type: ADD_TASK,\n        data\n    }\n}\nexport const deleteTask = (id) => {\n    return {\n        type: DELETE_TASK,\n        id\n    }\n}\n\nexport const checkTask = (id) => {\n    return{\n        type: CHECK_TASK,\n        id\n    }\n}\nexport const clearCompleted = () => {\n    return{\n        type: CLEAR_COMPLETED\n    }\n}\n\nexport const setFilter = (type) => {\n    return {\n        type: SET_FILTER,\n        taskType : type\n    }\n}\n","import { EmojiEmotionsRounded } from \"@material-ui/icons\"\n\n\nconst TaskDone = ()=> {\n    return (\n        <div className=\"all-done\">\n           <EmojiEmotionsRounded className=\"smile\"/>\n           <h1>Task Completed</h1>\n        </div>\n    )\n}\n\nexport default TaskDone\n","\nimport { Close } from \"@material-ui/icons\"\nimport { useDispatch } from \"react-redux\"\nimport { checkTask, deleteTask } from \"../actions/taskActions\"\n\n\n\nconst TaskItem = ({task}) => {\n \n\n    const dispatch = useDispatch()\n   \n    const handledeleteTask = () => {\n        dispatch(deleteTask(task.id))\n    } \n    const handleCheck = () => {\n        dispatch(checkTask(task.id))\n    }\n    const check = task.completed\n    return (\n        <div className=\"taskItem\">\n            <input \n                type=\"checkbox\" \n                defaultChecked = {check}\n                onClick = {handleCheck}\n                 />\n            \n            <p style= {check ? {\n                textDecoration:\"line-through\",color:'rgb(128, 125, 125)'} : \n                {textDecoration:\"none\"} }\n                > {task.title}</p>\n            \n            <button onClick={handledeleteTask} >\n              \n                <Close/>\n             \n            </button>\n            \n        </div>\n    )\n}\n\nexport default TaskItem\n","import { useEffect, useState } from \"react\"\nimport { useSelector } from \"react-redux\"\nimport TaskDone from \"./TaskDone\"\nimport TaskItem from \"./TaskItem\"\n\nconst TaskList = () => {\n\n    const tasks = useSelector(state => state.tasks)\n    const taskType = useSelector(state => state.taskType)\n\n    const [list,setList] = useState([])\n\n    useEffect(() => {\n       switch(taskType) {\n            case 'ACTIVE' :\n               setList(tasks.filter(task => !task.completed))\n               break;\n            \n            case 'COMPLETED' :\n                setList(tasks.filter(task => task.completed))\n                break;\n\n            default:\n                // tasks.forEach((task, index) => {\n                //     if(!task.completed){\n                //         tasks.splice(index, 1);\n                //         tasks.unshift(task)\n                //     }\n                // })\n                setList(tasks)\n       }\n    }, [taskType,tasks])\n    \n    return (\n        <div>\n            { list.length !== 0 ?  \n                list.map(task => <TaskItem key={task.id} task={task}/> ) : \n                <TaskDone/> }\n        </div>\n    )\n}\n\nexport default TaskList\n","import AddTask from \"./AddTask\"\nimport TaskList from \"./TaskList\"\n\nconst TaskManger = () => {\n    return (\n        <div className=\"taskMa\">\n            <AddTask/>\n            <hr />\n            <TaskList/>\n        </div>\n    )\n}\n\nexport default TaskManger\n","import { useSelector,useDispatch } from \"react-redux\"\nimport { setFilter } from \"../actions/taskActions\"\n\n\n\n\nconst Button = ({value}) => {\n\n    const taskType = useSelector(state => state.taskType)\n    const dispatch = useDispatch()\n    const handleFilter = (type) => {\n        dispatch(setFilter(type))\n    }\n\n    const activeButton = {\n       border : \"2px solid black\",\n       borderRadius : \"5px\"\n    };\n    const deactiveButton = {};\n\n\n    return (\n        <button \n            style ={taskType=== value ? activeButton : deactiveButton} \n            onClick={() => handleFilter(value)}> \n            {value}\n        </button>\n    )\n}\n\nexport default Button\n","import { useState,useEffect } from \"react\"\nimport { useDispatch,useSelector } from \"react-redux\"\nimport { clearCompleted} from \"../actions/taskActions\"\nimport Button from \"./Button\"\n\nconst Filters = () => {\n\n    const tasks = useSelector(state => state.tasks)\n\n    const dispatch = useDispatch()\n    \n    const handleClear = () => {\n        dispatch(clearCompleted())\n    }\n\n    const [length,setLength] = useState(0);\n    useEffect(() => {\n        setLength(tasks.filter(task => !task.completed).length)\n    }, [tasks])\n\n    return (\n        <div className=\"filter\">\n            <h3>{length} items remaining</h3>\n            <Button value={'ALL'} />\n            <Button value={'ACTIVE'} />\n            <Button value={'COMPLETED'} />\n            <h4 onClick={handleClear} >CLEAR COMPLETED</h4>\n        </div>\n    )\n}\n\nexport default Filters\n","import './App.css';\nimport DebounceSearch from './Components/Debounce/DebounceSearch';\nimport Header from './Components/Header';\n\n\n\n// import InfinteUseIntersection from './Components/InfiniteScrolling/InfinteUseIntersection';\n// import InfiniteScrolling from './Components/InfiniteScrolling/InfiniteScrolling';\nimport TaskManger from './Components/TaskManger';\nimport Filters from './Components/Filters';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header/>\n      <hr />\n      <Filters/>\n      <TaskManger/>\n      <DebounceSearch/>\n\n\n      {/* <InfiniteScrolling/>\n      \n      <InfinteUseIntersection/> */}\n    </div>\n  );\n}\n\nexport default App;\n","class Task {\n    constructor(id, title,completed = false) {\n        this.id = id\n        this.title = title\n        this.completed = completed\n    }\n}\n\nexport default Task","import { ADD_TASK, CHECK_TASK, CLEAR_COMPLETED,  DELETE_TASK, SET_FILTER } from \"../actions/actionTypes\";\nimport Task from \"../model/Task\";\n\n\nconst intitalState = {\n    taskType : 'ALL',\n    tasks : [\n        new Task(1,\"Task number 1 which has to be done by this date\",false),\n        new Task(2,\"Task number 2 clouser\",false),\n        new Task(3,\"Detail-out task 3\",false),\n        new Task(4,\"Pick someone at the airport at that day\",true),\n        new Task(5,\"Pick someone at the airport at that day\",true)\n    ]\n}\n\nexport const taskReducer = (state= intitalState,action) => {\n    switch(action.type){\n\n        case ADD_TASK :\n            const task = new Task(\n                state.tasks.length+1,\n                action.data\n            )\n            \n            return {\n                ...state,\n               tasks: [...state.tasks,task]\n            }\n\n        case DELETE_TASK :\n            \n            return {\n                ...state,\n                tasks: state.tasks.filter(task => task.id !== action.id)\n            }\n\n        case CHECK_TASK:\n            const tasks = state.tasks.map(obj =>{\n                if(obj.id === action.id){\n                    obj.completed = !obj.completed\n                }\n                return obj\n            })\n            \n            return {\n                ...state,\n                tasks\n            }\n\n\n        case CLEAR_COMPLETED :\n            return {\n                ...state,\n                tasks: state.tasks.filter(task => task.completed === false)\n            }\n\n        case SET_FILTER :\n            return {\n                ...state,\n                taskType : action.taskType\n            }\n\n        default :\n            return state;\n    }\n}\n","import { createStore } from \"redux\";\nimport { taskReducer } from \"./Reducers/taskReducer\";\n\n\n\nconst store = createStore(taskReducer);\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './store';\nimport { Provider } from 'react-redux';\n\n\nReactDOM.render(\n  <Provider store={store}> \n   <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}